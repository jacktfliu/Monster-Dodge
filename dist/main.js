/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  var canvas = document.getElementById('canvas');\n  var ctx = canvas.getContext('2d');\n  canvas.width = 1000;\n  canvas.heigth = 600;\n  var keys = [];\n  var ifritMovements = ['up', 'right', 'left', 'down'];\n  var numOfIfrit = 5;\n  var ifritBot = [];\n  var dragonMovement = ['up', 'right', 'left', 'down'];\n  var numOfDragon = 3;\n  var dragonBot = [];\n  var deathScytheMovement = ['up', 'right', 'left', 'down'];\n  var numOfDeathScythe = 8;\n  var DeathScytheBot = [];\n  var score = 0;\n  var gameOver = false;\n  var player = {\n    x: 200,\n    y: 200,\n    width: 32,\n    height: 48,\n    fx: 0,\n    fy: 0,\n    speed: 5,\n    moving: false\n  };\n  var playerChar = document.getElementById('player');\n  var dragonTarget = document.getElementById('dragon');\n  var deathScytheTarget = document.getElementById('death-scythe');\n  var ifritTarget = document.getElementById('ifrit');\n\n  function drawPlayer(img, sX, sY, sW, sH, dX, dY, dW, dH) {\n    ctx.drawImage(img, sX, sY, sW, sH, dX, dY, dW, dH);\n  }\n\n  function animatePlayer() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height); //player sprite\n\n    drawPlayer(playerChar, player.width * player.fx, player.height * player.fy, player.width, player.height, player.x, player.y, player.width, player.height);\n\n    for (i = 0; i < DeathScytheBot.length; i++) {\n      DeathScytheBot[i].drawDeath();\n      DeathScytheBot[i].updateDeathMovement();\n    }\n\n    for (i = 0; i < ifritBot.length; i++) {\n      ifritBot[i].drawIfrit();\n      ifritBot[i].updateIfritMovement();\n    }\n\n    for (i = 0; i < dragonBot.length; i++) {\n      dragonBot[i].drawDragon();\n      dragonBot[i].updateDragonMovement();\n    }\n\n    drawScore();\n    handleGameStatus();\n    moveChar();\n    handlePlayerF();\n\n    if (!gameOver) {\n      requestAnimationFrame(animatePlayer);\n    }\n  }\n\n  animatePlayer();\n\n  function drawScore() {\n    ctx.font = \"18px Arial\";\n    ctx.fillStyle = \"#black\";\n    ctx.fillText(\"Score: \" + score, 20, 25);\n  }\n\n  window.addEventListener('keydown', function (e) {\n    keys[e.keyCode] = true;\n    player.moving = true;\n  });\n  window.addEventListener('keyup', function (e) {\n    delete keys[e.keyCode];\n    player.moving = false;\n  }); //player control \n\n  function moveChar() {\n    if (keys[38] && player.y > 0) {\n      player.y -= player.speed;\n      player.fy = 3;\n    } else if (keys[37] && player.x > 0) {\n      player.x -= player.speed;\n      player.fy = 1;\n    } else if (keys[40] && player.y < canvas.heigth - player.height) {\n      player.y += player.speed;\n      player.fy = 0;\n    } else if (keys[39] && player.x < canvas.width - player.width) {\n      player.x += player.speed;\n      player.fy = 2;\n    }\n  } // player aniamtion movement\n\n\n  function handlePlayerF() {\n    if (player.fx < 3 && player.moving) {\n      player.fx++;\n    } else {\n      player.fx = 0;\n    }\n  } //collision function\n\n\n  function collision(first, second) {\n    if (!(first.x > second.x + second.width || first.x + first.width < second.x || first.y > second.y + second.height || first.y + first.height < second.y)) {\n      return true;\n    } else {\n      score++ / 100;\n    }\n  } // handlegame \n\n\n  function handleGameStatus() {\n    if (gameOver) {\n      ctx.fillStyle = 'black';\n      ctx.font = '90px Orbitron';\n      ctx.fillText('GAME OVER', 230, 300);\n      ctx.fillStyle = 'white';\n      ctx.font = '40px Orbitron';\n      ctx.fillText('Your Score is:' + \" \" + score, 345, 400);\n    }\n  } //ifrit movements\n\n\n  var Ifrit = /*#__PURE__*/function () {\n    function Ifrit() {\n      _classCallCheck(this, Ifrit);\n\n      this.width = 40;\n      this.height = 56;\n      this.fx = 0;\n      this.x = Math.random() * canvas.width - this.width;\n      this.y = Math.random() * canvas.height - this.height;\n      this.speed = Math.random() * 3 + 2;\n      this.action = ifritMovements[Math.floor(Math.random() * ifritMovements.length)];\n\n      if (this.action === 'up') {\n        this.fy = 3;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      } else if (this.action === 'right') {\n        this.fy = 2;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      } else if (this.action === 'down') {\n        this.fy = 0;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      } else if (this.action === 'left') {\n        this.fy = 1;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      }\n    }\n\n    _createClass(Ifrit, [{\n      key: \"drawIfrit\",\n      value: function drawIfrit() {\n        drawPlayer(ifritTarget, this.width * this.fx, this.height * this.fy, this.width, this.height, this.x, this.y, this.width * 1.5, this.height * 1.5);\n\n        if (collision(player, this)) {\n          gameOver = true;\n        }\n\n        if (this.fx < this.maxFrame) {\n          this.fx++;\n        } else {\n          this.fx = this.minFrame;\n        }\n      }\n    }, {\n      key: \"updateIfritMovement\",\n      value: function updateIfritMovement() {\n        if (this.action === 'up') {\n          if (this.y < 0 - this.height * 5) {\n            this.y = canvas.height + this.height;\n            this.x = Math.random() * canvas.width;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.y -= this.speed;\n          }\n        } else if (this.action === 'right') {\n          if (this.x > canvas.width + this.width * 5) {\n            this.x = 0 - this.width;\n            this.y = Math.random() * canvas.height;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.x += this.speed;\n          }\n        } else if (this.action === 'left') {\n          if (this.x > canvas.width + this.width * 5) {\n            this.x = 0 + this.width;\n            this.y = Math.random() * canvas.height;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.x -= this.speed;\n          }\n        } else if (this.action === 'down') {\n          if (this.y > canvas.height + this.height * 5) {\n            this.y = 0 - this.height;\n            this.x = Math.random() * canvas.width;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.y += this.speed;\n          }\n        }\n      }\n    }]);\n\n    return Ifrit;\n  }();\n\n  for (i = 0; i < numOfIfrit; i++) {\n    ifritBot.push(new Ifrit());\n  } // dragon \n\n\n  var Dragon = /*#__PURE__*/function () {\n    function Dragon() {\n      _classCallCheck(this, Dragon);\n\n      this.width = 142;\n      this.height = 142;\n      this.fx = 0;\n      this.x = Math.random() * canvas.width - this.width;\n      this.y = Math.random() * canvas.height - this.height;\n      this.speed = Math.random() * 3 + 2;\n      this.action = dragonMovement[Math.floor(Math.random() * dragonMovement.length)];\n\n      if (this.action === 'up') {\n        this.fy = 3;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      } else if (this.action === 'right') {\n        this.fy = 2;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      } else if (this.action === 'down') {\n        this.fy = 0;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      } else if (this.action === 'left') {\n        this.fy = 1;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      }\n    }\n\n    _createClass(Dragon, [{\n      key: \"drawDragon\",\n      value: function drawDragon() {\n        drawPlayer(dragonTarget, this.width * this.fx, this.height * this.fy, this.width, this.height, this.x, this.y, this.width * 1.5, this.height * 1.5);\n\n        if (collision(player, this)) {\n          gameOver = true;\n        }\n\n        if (this.fx < this.maxFrame) {\n          this.fx++;\n        } else {\n          this.fx = this.minFrame;\n        }\n      }\n    }, {\n      key: \"updateDragonMovement\",\n      value: function updateDragonMovement() {\n        if (this.action === 'up') {\n          if (this.y < 0 - this.height * 5) {\n            this.y = canvas.height + this.height;\n            this.x = Math.random() * canvas.width;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.y -= this.speed;\n          }\n        } else if (this.action === 'right') {\n          if (this.x > canvas.width + this.width * 5) {\n            this.x = 0 - this.width;\n            this.y = Math.random() * canvas.height;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.x += this.speed;\n          }\n        } else if (this.action === 'left') {\n          if (this.x > canvas.width + this.width * 5) {\n            this.x = 0 + this.width;\n            this.y = Math.random() * canvas.height;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.x -= this.speed;\n          }\n        } else if (this.action === 'down') {\n          if (this.y > canvas.height + this.height * 5) {\n            this.y = 0 - this.height;\n            this.x = Math.random() * canvas.width;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.y += this.speed;\n          }\n        }\n      }\n    }]);\n\n    return Dragon;\n  }();\n\n  for (i = 0; i < numOfDragon; i++) {\n    dragonBot.push(new Dragon());\n  } // DeathScythe\n\n\n  var DeathScythe = /*#__PURE__*/function () {\n    function DeathScythe() {\n      _classCallCheck(this, DeathScythe);\n\n      this.width = 50;\n      this.height = 48;\n      this.fx = 0;\n      this.x = Math.random() * canvas.width - this.width;\n      this.y = Math.random() * canvas.height - this.height;\n      this.speed = Math.random() * 3 + 2;\n      this.action = deathScytheMovement[Math.floor(Math.random() * deathScytheMovement.length)];\n\n      if (this.action === 'up') {\n        this.fy = 3;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      } else if (this.action === 'right') {\n        this.fy = 2;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      } else if (this.action === 'down') {\n        this.fy = 0;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      } else if (this.action === 'left') {\n        this.fy = 1;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      }\n    }\n\n    _createClass(DeathScythe, [{\n      key: \"drawDeath\",\n      value: function drawDeath() {\n        drawPlayer(deathScytheTarget, this.width * this.fx, this.height * this.fy, this.width, this.height, this.x, this.y, this.width * 1.5, this.height * 1.5);\n\n        if (collision(player, this)) {\n          gameOver = true;\n        }\n\n        if (this.fx < this.maxFrame) {\n          this.fx++;\n        } else {\n          this.fx = this.minFrame;\n        }\n      }\n    }, {\n      key: \"updateDeathMovement\",\n      value: function updateDeathMovement() {\n        if (this.action === 'up') {\n          if (this.y < 0 - this.height * 5) {\n            this.y = canvas.height + this.height;\n            this.x = Math.random() * canvas.width;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.y -= this.speed;\n          }\n        } else if (this.action === 'right') {\n          if (this.x > canvas.width + this.width * 5) {\n            this.x = 0 - this.width;\n            this.y = Math.random() * canvas.height;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.x += this.speed;\n          }\n        } else if (this.action === 'left') {\n          if (this.x > canvas.width + this.width * 5) {\n            this.x = 0 + this.width;\n            this.y = Math.random() * canvas.height;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.x -= this.speed;\n          }\n        } else if (this.action === 'down') {\n          if (this.y > canvas.height + this.height * 5) {\n            this.y = 0 - this.height;\n            this.x = Math.random() * canvas.width;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.y += this.speed;\n          }\n        }\n      }\n    }]);\n\n    return DeathScythe;\n  }();\n\n  for (i = 0; i < numOfDeathScythe; i++) {\n    DeathScytheBot.push(new DeathScythe());\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGluZ3Nob3QvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJuYW1lcyI6WyJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjYW52YXMiLCJnZXRFbGVtZW50QnlJZCIsImN0eCIsImdldENvbnRleHQiLCJ3aWR0aCIsImhlaWd0aCIsImtleXMiLCJpZnJpdE1vdmVtZW50cyIsIm51bU9mSWZyaXQiLCJpZnJpdEJvdCIsImRyYWdvbk1vdmVtZW50IiwibnVtT2ZEcmFnb24iLCJkcmFnb25Cb3QiLCJkZWF0aFNjeXRoZU1vdmVtZW50IiwibnVtT2ZEZWF0aFNjeXRoZSIsIkRlYXRoU2N5dGhlQm90Iiwic2NvcmUiLCJnYW1lT3ZlciIsInBsYXllciIsIngiLCJ5IiwiaGVpZ2h0IiwiZngiLCJmeSIsInNwZWVkIiwibW92aW5nIiwicGxheWVyQ2hhciIsImRyYWdvblRhcmdldCIsImRlYXRoU2N5dGhlVGFyZ2V0IiwiaWZyaXRUYXJnZXQiLCJkcmF3UGxheWVyIiwiaW1nIiwic1giLCJzWSIsInNXIiwic0giLCJkWCIsImRZIiwiZFciLCJkSCIsImRyYXdJbWFnZSIsImFuaW1hdGVQbGF5ZXIiLCJjbGVhclJlY3QiLCJpIiwibGVuZ3RoIiwiZHJhd0RlYXRoIiwidXBkYXRlRGVhdGhNb3ZlbWVudCIsImRyYXdJZnJpdCIsInVwZGF0ZUlmcml0TW92ZW1lbnQiLCJkcmF3RHJhZ29uIiwidXBkYXRlRHJhZ29uTW92ZW1lbnQiLCJkcmF3U2NvcmUiLCJoYW5kbGVHYW1lU3RhdHVzIiwibW92ZUNoYXIiLCJoYW5kbGVQbGF5ZXJGIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZm9udCIsImZpbGxTdHlsZSIsImZpbGxUZXh0Iiwid2luZG93IiwiZSIsImtleUNvZGUiLCJjb2xsaXNpb24iLCJmaXJzdCIsInNlY29uZCIsIklmcml0IiwiTWF0aCIsInJhbmRvbSIsImFjdGlvbiIsImZsb29yIiwibWluRnJhbWUiLCJtYXhGcmFtZSIsInB1c2gi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LENBQTFDLEVBQThDO0FBQzFDLGlCQUFLZSxDQUFMLEdBQVMsSUFBSSxLQUFLZixLQUFsQjtBQUNBLGlCQUFLZ0IsQ0FBTCxHQUFTOEMsSUFBSSxDQUFDQyxNQUFMLEtBQWdCbkUsTUFBTSxDQUFDcUIsTUFBaEM7QUFDQSxpQkFBS0csS0FBTCxHQUFjMEMsSUFBSSxDQUFDQyxNQUFMLEtBQWdCLENBQWpCLEdBQXNCLENBQW5DO0FBQ0gsV0FKRCxNQUlPO0FBQ0gsaUJBQUtoRCxDQUFMLElBQVUsS0FBS0ssS0FBZjtBQUNIO0FBQ0osU0FSSSxNQVNBLElBQUksS0FBSzRDLE1BQUwsS0FBZ0IsTUFBcEIsRUFBNEI7QUFDN0IsY0FBSSxLQUFLaEQsQ0FBTCxHQUFTcEIsTUFBTSxDQUFDcUIsTUFBUCxHQUFpQixLQUFLQSxNQUFMLEdBQWMsQ0FBNUMsRUFBZ0Q7QUFDNUMsaUJBQUtELENBQUwsR0FBUyxJQUFJLEtBQUtDLE1BQWxCO0FBQ0EsaUJBQUtGLENBQUwsR0FBUytDLElBQUksQ0FBQ0MsTUFBTCxLQUFnQm5FLE1BQU0sQ0FBQ0ksS0FBaEM7QUFDQSxpQkFBS29CLEtBQUwsR0FBYzBDLElBQUksQ0FBQ0MsTUFBTCxLQUFnQixDQUFqQixHQUFzQixDQUFuQztBQUNILFdBSkQsTUFJTztBQUNILGlCQUFLL0MsQ0FBTCxJQUFVLEtBQUtJLEtBQWY7QUFDSDtBQUNKO0FBQ0o7QUF6WjJDOztBQUFBO0FBQUE7O0FBNFpoRCxPQUFLbUIsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHN0IsZ0JBQWhCLEVBQWtDNkIsQ0FBQyxFQUFuQyxFQUFzQztBQUNsQzVCLElBQUFBLGNBQWMsQ0FBQ3lELElBQWYsQ0FBb0IsSUFBSUUsV0FBSixFQUFwQjtBQUNIO0FBRUosQ0FoYUQiLCJzb3VyY2VzQ29udGVudCI6WyJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG5cbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzJyk7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgY2FudmFzLndpZHRoID0gMTAwMDtcbiAgICBjYW52YXMuaGVpZ3RoID0gNjAwO1xuXG4gICAgY29uc3Qga2V5cyA9IFtdO1xuICAgIGNvbnN0IGlmcml0TW92ZW1lbnRzID0gWyd1cCcsJ3JpZ2h0JywgJ2xlZnQnLCAnZG93biddO1xuICAgIGNvbnN0IG51bU9mSWZyaXQgPSA1O1xuICAgIGNvbnN0IGlmcml0Qm90ID0gW107XG5cbiAgICBjb25zdCBkcmFnb25Nb3ZlbWVudCA9IFsndXAnLCdyaWdodCcsICdsZWZ0JywgJ2Rvd24nXTtcbiAgICBjb25zdCBudW1PZkRyYWdvbiA9IDM7XG4gICAgY29uc3QgZHJhZ29uQm90ID0gW107XG5cbiAgICBjb25zdCBkZWF0aFNjeXRoZU1vdmVtZW50ID0gWyd1cCcsJ3JpZ2h0JywgJ2xlZnQnLCAnZG93biddO1xuICAgIGNvbnN0IG51bU9mRGVhdGhTY3l0aGUgPSA4O1xuICAgIGNvbnN0IERlYXRoU2N5dGhlQm90ID0gW107XG5cbiAgICBsZXQgc2NvcmUgPSAwO1xuICAgIGxldCBnYW1lT3ZlciA9IGZhbHNlO1xuXG4gICAgY29uc3QgcGxheWVyID0ge1xuICAgICAgICB4OiAyMDAsXG4gICAgICAgIHk6IDIwMCxcbiAgICAgICAgd2lkdGg6IDMyLFxuICAgICAgICBoZWlnaHQ6IDQ4LFxuICAgICAgICBmeDogMCxcbiAgICAgICAgZnk6IDAsXG4gICAgICAgIHNwZWVkOiA1LFxuICAgICAgICBtb3Zpbmc6IGZhbHNlXG4gICAgfVxuXG4gICAgY29uc3QgcGxheWVyQ2hhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGF5ZXInKVxuICAgIGNvbnN0IGRyYWdvblRhcmdldCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkcmFnb24nKVxuICAgIGNvbnN0IGRlYXRoU2N5dGhlVGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RlYXRoLXNjeXRoZScpXG4gICAgY29uc3QgaWZyaXRUYXJnZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaWZyaXQnKSAgICBcblxuICAgIGZ1bmN0aW9uIGRyYXdQbGF5ZXIoaW1nLCBzWCwgc1ksIHNXLCBzSCwgZFgsIGRZLCBkVywgZEgpe1xuICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgc1gsIHNZLCBzVywgc0gsIGRYLCBkWSwgZFcsIGRIKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhbmltYXRlUGxheWVyKCl7XG4gICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KVxuICAgICAgICAvL3BsYXllciBzcHJpdGVcbiAgICAgICAgZHJhd1BsYXllcihwbGF5ZXJDaGFyLCBwbGF5ZXIud2lkdGggKiBwbGF5ZXIuZngsIHBsYXllci5oZWlnaHQgKiBwbGF5ZXIuZnksIHBsYXllci53aWR0aCwgcGxheWVyLmhlaWdodCwgXG4gICAgICAgIHBsYXllci54LCBwbGF5ZXIueSwgcGxheWVyLndpZHRoLCBwbGF5ZXIuaGVpZ2h0KTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgRGVhdGhTY3l0aGVCb3QubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgICAgIERlYXRoU2N5dGhlQm90W2ldLmRyYXdEZWF0aCgpO1xuICAgICAgICAgICAgRGVhdGhTY3l0aGVCb3RbaV0udXBkYXRlRGVhdGhNb3ZlbWVudCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGlmcml0Qm90Lmxlbmd0aDsgaSsrICl7XG4gICAgICAgICAgICBpZnJpdEJvdFtpXS5kcmF3SWZyaXQoKTtcbiAgICAgICAgICAgIGlmcml0Qm90W2ldLnVwZGF0ZUlmcml0TW92ZW1lbnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBkcmFnb25Cb3QubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgICAgIGRyYWdvbkJvdFtpXS5kcmF3RHJhZ29uKCk7XG4gICAgICAgICAgICBkcmFnb25Cb3RbaV0udXBkYXRlRHJhZ29uTW92ZW1lbnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRyYXdTY29yZSgpXG4gICAgICAgIGhhbmRsZUdhbWVTdGF0dXMoKVxuICAgICAgICBtb3ZlQ2hhcigpO1xuICAgICAgICBoYW5kbGVQbGF5ZXJGKCk7XG4gICAgICAgIGlmICghZ2FtZU92ZXIpe1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGVQbGF5ZXIpO1xuICAgICAgICB9IFxuICAgIH1cblxuICAgIGFuaW1hdGVQbGF5ZXIoKTsgIFxuXG4gICAgZnVuY3Rpb24gZHJhd1Njb3JlKCl7XG4gICAgICAgIGN0eC5mb250ID0gXCIxOHB4IEFyaWFsXCI7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBcIiNibGFja1wiO1xuICAgICAgICBjdHguZmlsbFRleHQoXCJTY29yZTogXCIrc2NvcmUsIDIwLCAyNSk7XG4gICAgfVxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbihlKXtcbiAgICAgICAga2V5c1tlLmtleUNvZGVdID0gdHJ1ZTtcbiAgICAgICAgcGxheWVyLm1vdmluZyA9IHRydWU7XG4gICAgfSlcbiAgICBcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbihlKXtcbiAgICAgICAgZGVsZXRlIGtleXNbZS5rZXlDb2RlXTtcbiAgICAgICAgcGxheWVyLm1vdmluZyA9IGZhbHNlO1xuICAgIH0pXG4gIFxuICAgIC8vcGxheWVyIGNvbnRyb2wgXG4gICAgZnVuY3Rpb24gbW92ZUNoYXIoKXtcbiAgICAgICAgaWYgKGtleXNbMzhdICYmIHBsYXllci55ID4gMCl7XG4gICAgICAgICAgICBwbGF5ZXIueSAtPSBwbGF5ZXIuc3BlZWRcbiAgICAgICAgICAgIHBsYXllci5meSA9IDNcbiAgICAgICAgfSBlbHNlIGlmIChrZXlzWzM3XSAmJiBwbGF5ZXIueCA+IDApe1xuICAgICAgICAgICAgcGxheWVyLnggLT0gcGxheWVyLnNwZWVkXG4gICAgICAgICAgICBwbGF5ZXIuZnkgPSAxXG4gICAgICAgIH0gZWxzZSBpZiAoa2V5c1s0MF0gJiYgcGxheWVyLnkgPCBjYW52YXMuaGVpZ3RoIC0gcGxheWVyLmhlaWdodCl7XG4gICAgICAgICAgICBwbGF5ZXIueSArPSBwbGF5ZXIuc3BlZWRcbiAgICAgICAgICAgIHBsYXllci5meSA9IDBcbiAgICAgICAgfSBlbHNlIGlmIChrZXlzWzM5XSAmJiBwbGF5ZXIueCA8IGNhbnZhcy53aWR0aCAtIHBsYXllci53aWR0aCl7XG4gICAgICAgICAgICBwbGF5ZXIueCArPSBwbGF5ZXIuc3BlZWRcbiAgICAgICAgICAgIHBsYXllci5meSA9IDJcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHBsYXllciBhbmlhbXRpb24gbW92ZW1lbnRcbiAgICBmdW5jdGlvbiBoYW5kbGVQbGF5ZXJGKCl7XG4gICAgICAgIGlmIChwbGF5ZXIuZnggPCAzICYmIHBsYXllci5tb3Zpbmcpe1xuICAgICAgICAgICAgcGxheWVyLmZ4KytcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBsYXllci5meCA9IDBcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vY29sbGlzaW9uIGZ1bmN0aW9uXG4gICAgZnVuY3Rpb24gY29sbGlzaW9uKGZpcnN0LCBzZWNvbmQpe1xuICAgICAgICBpZiAoICEoZmlyc3QueCA+IHNlY29uZC54ICsgc2Vjb25kLndpZHRoIHx8XG4gICAgICAgICAgICAgICAgZmlyc3QueCAgKyBmaXJzdC53aWR0aCA8IHNlY29uZC54IHx8IFxuICAgICAgICAgICAgICAgIGZpcnN0LnkgPiBzZWNvbmQueSArIHNlY29uZC5oZWlnaHQgfHxcbiAgICAgICAgICAgICAgICBmaXJzdC55ICsgZmlyc3QuaGVpZ2h0IDwgc2Vjb25kLnkpXG4gICAgICAgICl7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgKHNjb3JlKysgLyAxMDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gaGFuZGxlZ2FtZSBcbiAgICBmdW5jdGlvbiBoYW5kbGVHYW1lU3RhdHVzKCl7XG4gICAgICAgIGlmIChnYW1lT3Zlcil7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gJ2JsYWNrJztcbiAgICAgICAgICAgIGN0eC5mb250ID0gJzkwcHggT3JiaXRyb24nO1xuICAgICAgICAgICAgY3R4LmZpbGxUZXh0KCdHQU1FIE9WRVInLCAyMzAsIDMwMCk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcbiAgICAgICAgICAgIGN0eC5mb250ID0gJzQwcHggT3JiaXRyb24nO1xuICAgICAgICAgICAgY3R4LmZpbGxUZXh0KCdZb3VyIFNjb3JlIGlzOicrIFwiIFwiICtzY29yZSwgMzQ1LCA0MDApOyAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9pZnJpdCBtb3ZlbWVudHNcbiAgICBjbGFzcyBJZnJpdCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gNDA7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IDU2O1xuICAgICAgICAgICAgdGhpcy5meCA9IDA7XG4gICAgICAgICAgICB0aGlzLnggPSBNYXRoLnJhbmRvbSgpICogY2FudmFzLndpZHRoIC0gdGhpcy53aWR0aDtcbiAgICAgICAgICAgIHRoaXMueSA9IE1hdGgucmFuZG9tKCkgKiBjYW52YXMuaGVpZ2h0IC0gdGhpcy5oZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLnNwZWVkID0gKE1hdGgucmFuZG9tKCkgKiAzKSArIDI7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbiA9IGlmcml0TW92ZW1lbnRzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGlmcml0TW92ZW1lbnRzLmxlbmd0aCldO1xuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uID09PSAndXAnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5meSA9IDM7IFxuICAgICAgICAgICAgICAgIHRoaXMubWluRnJhbWUgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMubWF4RnJhbWUgPSAzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5hY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZ5ID0gMjsgXG4gICAgICAgICAgICAgICAgdGhpcy5taW5GcmFtZSA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXhGcmFtZSA9IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmFjdGlvbiA9PT0gJ2Rvd24nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5meSA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5taW5GcmFtZSA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXhGcmFtZSA9IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmFjdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5meSA9IDE7XG4gICAgICAgICAgICAgICAgdGhpcy5taW5GcmFtZSA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXhGcmFtZSA9IDNcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgZHJhd0lmcml0KCl7XG4gICAgICAgICAgICBkcmF3UGxheWVyKGlmcml0VGFyZ2V0LCB0aGlzLndpZHRoICogdGhpcy5meCwgdGhpcy5oZWlnaHQgKiB0aGlzLmZ5LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy54LCB0aGlzLnksIHRoaXMud2lkdGggKiAxLjUsIHRoaXMuaGVpZ2h0ICogMS41KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGNvbGxpc2lvbihwbGF5ZXIsIHRoaXMpKXtcbiAgICAgICAgICAgICAgICBnYW1lT3ZlciA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5meCA8IHRoaXMubWF4RnJhbWUpe1xuICAgICAgICAgICAgICAgIHRoaXMuZngrK1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZ4ID0gdGhpcy5taW5GcmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlSWZyaXRNb3ZlbWVudCgpe1xuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uID09PSAndXAnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMueSA8IDAgLSAodGhpcy5oZWlnaHQgKiA1KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnkgPSBjYW52YXMuaGVpZ2h0ICsgdGhpcy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueCA9IE1hdGgucmFuZG9tKCkgKiBjYW52YXMud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3BlZWQgPSAoTWF0aC5yYW5kb20oKSAqIDMpICsgMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnkgLT0gdGhpcy5zcGVlZDsgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuYWN0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMueCA+IGNhbnZhcy53aWR0aCArICh0aGlzLndpZHRoICogNSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy54ID0gMCAtIHRoaXMud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueSA9IE1hdGgucmFuZG9tKCkgKiBjYW52YXMuaGVpZ2h0OyBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGVlZCA9IChNYXRoLnJhbmRvbSgpICogMykgKyAyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueCArPSB0aGlzLnNwZWVkOyBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IFxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5hY3Rpb24gPT09J2xlZnQnKXtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy54ID4gY2FudmFzLndpZHRoICsgKHRoaXMud2lkdGggKiA1KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnggPSAwICsgdGhpcy53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ID0gTWF0aC5yYW5kb20oKSAqIGNhbnZhcy5oZWlnaHQ7IFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNwZWVkID0gKE1hdGgucmFuZG9tKCkgKiAzKSArIDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy54IC09IHRoaXMuc3BlZWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IFxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5hY3Rpb24gPT09ICdkb3duJykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnkgPiBjYW52YXMuaGVpZ2h0ICsgKHRoaXMuaGVpZ2h0ICogNSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ID0gMCAtIHRoaXMuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnggPSBNYXRoLnJhbmRvbSgpICogY2FudmFzLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNwZWVkID0gKE1hdGgucmFuZG9tKCkgKiAzKSArIDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ICs9IHRoaXMuc3BlZWQ7ICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbnVtT2ZJZnJpdDsgaSsrKXtcbiAgICAgICAgaWZyaXRCb3QucHVzaChuZXcgSWZyaXQoKSk7XG4gICAgfVxuXG4gICAgLy8gZHJhZ29uIFxuXG4gICAgY2xhc3MgRHJhZ29uIHtcbiAgICAgICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSAxNDI7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IDE0MjtcbiAgICAgICAgICAgIHRoaXMuZnggPSAwO1xuICAgICAgICAgICAgdGhpcy54ID0gTWF0aC5yYW5kb20oKSAqIGNhbnZhcy53aWR0aCAtIHRoaXMud2lkdGg7XG4gICAgICAgICAgICB0aGlzLnkgPSBNYXRoLnJhbmRvbSgpICogY2FudmFzLmhlaWdodCAtIHRoaXMuaGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy5zcGVlZCA9IChNYXRoLnJhbmRvbSgpICogMykgKyAyO1xuICAgICAgICAgICAgdGhpcy5hY3Rpb24gPSBkcmFnb25Nb3ZlbWVudFtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBkcmFnb25Nb3ZlbWVudC5sZW5ndGgpXTtcbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvbiA9PT0gJ3VwJykge1xuICAgICAgICAgICAgICAgIHRoaXMuZnkgPSAzOyBcbiAgICAgICAgICAgICAgICB0aGlzLm1pbkZyYW1lID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLm1heEZyYW1lID0gMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuYWN0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5meSA9IDI7IFxuICAgICAgICAgICAgICAgIHRoaXMubWluRnJhbWUgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMubWF4RnJhbWUgPSAzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5hY3Rpb24gPT09ICdkb3duJykge1xuICAgICAgICAgICAgICAgIHRoaXMuZnkgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMubWluRnJhbWUgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMubWF4RnJhbWUgPSAzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5hY3Rpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgICAgIHRoaXMuZnkgPSAxO1xuICAgICAgICAgICAgICAgIHRoaXMubWluRnJhbWUgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMubWF4RnJhbWUgPSAzXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGRyYXdEcmFnb24oKXtcbiAgICAgICAgICAgIGRyYXdQbGF5ZXIoZHJhZ29uVGFyZ2V0LCB0aGlzLndpZHRoICogdGhpcy5meCwgdGhpcy5oZWlnaHQgKiB0aGlzLmZ5LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy54LCB0aGlzLnksIHRoaXMud2lkdGggKiAxLjUsIHRoaXMuaGVpZ2h0ICogMS41KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGNvbGxpc2lvbihwbGF5ZXIsIHRoaXMpKXtcbiAgICAgICAgICAgICAgICBnYW1lT3ZlciA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5meCA8IHRoaXMubWF4RnJhbWUpe1xuICAgICAgICAgICAgICAgIHRoaXMuZngrK1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZ4ID0gdGhpcy5taW5GcmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlRHJhZ29uTW92ZW1lbnQoKXtcbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvbiA9PT0gJ3VwJykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnkgPCAwIC0gKHRoaXMuaGVpZ2h0ICogNSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ID0gY2FudmFzLmhlaWdodCArIHRoaXMuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnggPSBNYXRoLnJhbmRvbSgpICogY2FudmFzLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNwZWVkID0gKE1hdGgucmFuZG9tKCkgKiAzKSArIDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55IC09IHRoaXMuc3BlZWQ7ICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmFjdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnggPiBjYW52YXMud2lkdGggKyAodGhpcy53aWR0aCAqIDUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueCA9IDAgLSB0aGlzLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnkgPSBNYXRoLnJhbmRvbSgpICogY2FudmFzLmhlaWdodDsgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3BlZWQgPSAoTWF0aC5yYW5kb20oKSAqIDMpICsgMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnggKz0gdGhpcy5zcGVlZDsgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuYWN0aW9uID09PSdsZWZ0Jyl7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMueCA+IGNhbnZhcy53aWR0aCArICh0aGlzLndpZHRoICogNSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy54ID0gMCArIHRoaXMud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueSA9IE1hdGgucmFuZG9tKCkgKiBjYW52YXMuaGVpZ2h0OyBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGVlZCA9IChNYXRoLnJhbmRvbSgpICogMykgKyAyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueCAtPSB0aGlzLnNwZWVkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuYWN0aW9uID09PSAnZG93bicpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy55ID4gY2FudmFzLmhlaWdodCArICh0aGlzLmhlaWdodCAqIDUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueSA9IDAgLSB0aGlzLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy54ID0gTWF0aC5yYW5kb20oKSAqIGNhbnZhcy53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGVlZCA9IChNYXRoLnJhbmRvbSgpICogMykgKyAyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueSArPSB0aGlzLnNwZWVkOyAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IG51bU9mRHJhZ29uOyBpKyspe1xuICAgICAgICBkcmFnb25Cb3QucHVzaChuZXcgRHJhZ29uKCkpO1xuICAgIH1cblxuXG4gICAgLy8gRGVhdGhTY3l0aGVcblxuICAgIGNsYXNzIERlYXRoU2N5dGhlIHtcbiAgICAgICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSA1MDtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gNDg7XG4gICAgICAgICAgICB0aGlzLmZ4ID0gMDtcbiAgICAgICAgICAgIHRoaXMueCA9IE1hdGgucmFuZG9tKCkgKiBjYW52YXMud2lkdGggLSB0aGlzLndpZHRoO1xuICAgICAgICAgICAgdGhpcy55ID0gTWF0aC5yYW5kb20oKSAqIGNhbnZhcy5oZWlnaHQgLSB0aGlzLmhlaWdodDtcbiAgICAgICAgICAgIHRoaXMuc3BlZWQgPSAoTWF0aC5yYW5kb20oKSAqIDMpICsgMjtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uID0gZGVhdGhTY3l0aGVNb3ZlbWVudFtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBkZWF0aFNjeXRoZU1vdmVtZW50Lmxlbmd0aCldO1xuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uID09PSAndXAnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5meSA9IDM7IFxuICAgICAgICAgICAgICAgIHRoaXMubWluRnJhbWUgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMubWF4RnJhbWUgPSAzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5hY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZ5ID0gMjsgXG4gICAgICAgICAgICAgICAgdGhpcy5taW5GcmFtZSA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXhGcmFtZSA9IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmFjdGlvbiA9PT0gJ2Rvd24nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5meSA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5taW5GcmFtZSA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXhGcmFtZSA9IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmFjdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5meSA9IDE7XG4gICAgICAgICAgICAgICAgdGhpcy5taW5GcmFtZSA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXhGcmFtZSA9IDNcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgZHJhd0RlYXRoKCl7XG4gICAgICAgICAgICBkcmF3UGxheWVyKGRlYXRoU2N5dGhlVGFyZ2V0LCB0aGlzLndpZHRoICogdGhpcy5meCwgdGhpcy5oZWlnaHQgKiB0aGlzLmZ5LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy54LCB0aGlzLnksIHRoaXMud2lkdGggKiAxLjUsIHRoaXMuaGVpZ2h0ICogMS41KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGNvbGxpc2lvbihwbGF5ZXIsIHRoaXMpKXtcbiAgICAgICAgICAgICAgICBnYW1lT3ZlciA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmZ4IDwgdGhpcy5tYXhGcmFtZSl7XG4gICAgICAgICAgICAgICAgdGhpcy5meCsrXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZnggPSB0aGlzLm1pbkZyYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB1cGRhdGVEZWF0aE1vdmVtZW50KCl7XG4gICAgICAgICAgICBpZiAodGhpcy5hY3Rpb24gPT09ICd1cCcpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy55IDwgMCAtICh0aGlzLmhlaWdodCAqIDUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueSA9IGNhbnZhcy5oZWlnaHQgKyB0aGlzLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy54ID0gTWF0aC5yYW5kb20oKSAqIGNhbnZhcy53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGVlZCA9IChNYXRoLnJhbmRvbSgpICogMykgKyAyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueSAtPSB0aGlzLnNwZWVkOyAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5hY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy54ID4gY2FudmFzLndpZHRoICsgKHRoaXMud2lkdGggKiA1KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnggPSAwIC0gdGhpcy53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ID0gTWF0aC5yYW5kb20oKSAqIGNhbnZhcy5oZWlnaHQ7IFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNwZWVkID0gKE1hdGgucmFuZG9tKCkgKiAzKSArIDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy54ICs9IHRoaXMuc3BlZWQ7IFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmFjdGlvbiA9PT0nbGVmdCcpe1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnggPiBjYW52YXMud2lkdGggKyAodGhpcy53aWR0aCAqIDUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueCA9IDAgKyB0aGlzLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnkgPSBNYXRoLnJhbmRvbSgpICogY2FudmFzLmhlaWdodDsgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3BlZWQgPSAoTWF0aC5yYW5kb20oKSAqIDMpICsgMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnggLT0gdGhpcy5zcGVlZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmFjdGlvbiA9PT0gJ2Rvd24nKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMueSA+IGNhbnZhcy5oZWlnaHQgKyAodGhpcy5oZWlnaHQgKiA1KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnkgPSAwIC0gdGhpcy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueCA9IE1hdGgucmFuZG9tKCkgKiBjYW52YXMud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3BlZWQgPSAoTWF0aC5yYW5kb20oKSAqIDMpICsgMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnkgKz0gdGhpcy5zcGVlZDsgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBudW1PZkRlYXRoU2N5dGhlOyBpKyspe1xuICAgICAgICBEZWF0aFNjeXRoZUJvdC5wdXNoKG5ldyBEZWF0aFNjeXRoZSgpKTtcbiAgICB9XG5cbn0pIl0sImZpbGUiOiIuL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/stylesheets/index.scss":
/*!************************************!*\
  !*** ./src/stylesheets/index.scss ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGluZ3Nob3QvLi9zcmMvc3R5bGVzaGVldHMvaW5kZXguc2Nzcz8yMzFlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSIsImZpbGUiOiIuL3NyYy9zdHlsZXNoZWV0cy9pbmRleC5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/stylesheets/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/stylesheets/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;