/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  var canvas = document.getElementById('canvas');\n  var ctx = canvas.getContext('2d');\n  canvas.width = 1000;\n  canvas.heigth = 600;\n  var keys = [];\n  var ifritMovements = ['up', 'right', 'left', 'down'];\n  var numOfIfrit = 5;\n  var ifritBot = [];\n  var dragonMovement = ['up', 'right', 'left', 'down'];\n  var numOfDragon = 3;\n  var dragonBot = [];\n  var deathScytheMovement = ['up', 'right', 'left', 'down'];\n  var numOfDeathScythe = 8;\n  var DeathScytheBot = [];\n  var score = 0;\n  var gameOver = false;\n  var playerChar = document.getElementById('player');\n  var dragonTarget = document.getElementById('dragon');\n  var deathScytheTarget = document.getElementById('death-scythe');\n  var ifritTarget = document.getElementById('ifrit');\n  var monster = document.getElementById('monster');\n  var instructions = document.getElementById('instructions');\n  var player = {\n    x: 300,\n    y: 300,\n    width: 32,\n    height: 48,\n    fx: 0,\n    fy: 0,\n    speed: 5,\n    moving: false\n  }; // instructions.addEventListener('click', () => {\n  // })\n\n  function drawPlayer(img, sX, sY, sW, sH, dX, dY, dW, dH) {\n    ctx.drawImage(img, sX, sY, sW, sH, dX, dY, dW, dH);\n  }\n\n  function animatePlayer() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height); //player sprite\n\n    drawPlayer(playerChar, player.width * player.fx, player.height * player.fy, player.width, player.height, player.x, player.y, player.width, player.height);\n\n    for (i = 0; i < DeathScytheBot.length; i++) {\n      DeathScytheBot[i].drawDeath();\n      DeathScytheBot[i].updateDeathMovement();\n    }\n\n    for (i = 0; i < ifritBot.length; i++) {\n      ifritBot[i].drawIfrit();\n      ifritBot[i].updateIfritMovement();\n    }\n\n    for (i = 0; i < dragonBot.length; i++) {\n      dragonBot[i].drawDragon();\n      dragonBot[i].updateDragonMovement();\n    }\n\n    drawScore();\n    handleGameStatus();\n    moveChar();\n    handlePlayerF();\n\n    if (!gameOver) {\n      requestAnimationFrame(animatePlayer);\n    }\n  }\n\n  monster.addEventListener('click', function () {\n    gameOver = false;\n    ifritBot = [];\n    dragonBot = [];\n    DeathScytheBot = [];\n    score = 0;\n\n    for (i = 0; i < numOfIfrit; i++) {\n      ifritBot.push(new Ifrit());\n    }\n\n    for (i = 0; i < numOfDragon; i++) {\n      dragonBot.push(new Dragon());\n    }\n\n    for (i = 0; i < numOfDeathScythe; i++) {\n      DeathScytheBot.push(new DeathScythe());\n    }\n\n    animatePlayer();\n  });\n\n  function drawScore() {\n    ctx.font = \"18px Arial\";\n    ctx.fillStyle = \"#black\";\n    ctx.fillText(\"Score: \" + score, 20, 25);\n  }\n\n  window.addEventListener('keydown', function (e) {\n    keys[e.keyCode] = true;\n    player.moving = true;\n  });\n  window.addEventListener('keyup', function (e) {\n    delete keys[e.keyCode];\n    player.moving = false;\n  }); //player control \n\n  function moveChar() {\n    if (keys[38] && player.y > 0) {\n      player.y -= player.speed;\n      player.fy = 3;\n    } else if (keys[37] && player.x > 0) {\n      player.x -= player.speed;\n      player.fy = 1;\n    } else if (keys[40] && player.y < canvas.heigth - player.height) {\n      player.y += player.speed;\n      player.fy = 0;\n    } else if (keys[39] && player.x < canvas.width - player.width) {\n      player.x += player.speed;\n      player.fy = 2;\n    }\n  } // player aniamtion movement\n\n\n  function handlePlayerF() {\n    if (player.fx < 3 && player.moving) {\n      player.fx++;\n    } else {\n      player.fx = 0;\n    }\n  } //collision function\n\n\n  function collision(first, second) {\n    if (!(first.x > second.x + second.width || first.x + first.width < second.x || first.y > second.y + second.height || first.y + first.height < second.y)) {\n      return true;\n    } else {\n      score++ / 100;\n    }\n  } // handlegame \n\n\n  function handleGameStatus() {\n    if (gameOver) {\n      ctx.fillStyle = 'black';\n      ctx.font = '90px Orbitron';\n      ctx.fillText('GAME OVER', 230, 300);\n      ctx.fillStyle = 'white';\n      ctx.font = '40px Orbitron';\n      ctx.fillText('Your Score is:' + \" \" + score, 345, 400);\n    }\n  } //ifrit movements\n\n\n  var Ifrit = /*#__PURE__*/function () {\n    function Ifrit() {\n      _classCallCheck(this, Ifrit);\n\n      this.width = 40;\n      this.height = 56;\n      this.fx = 0;\n      this.x = Math.random() * canvas.width - this.width;\n      this.y = Math.random() * canvas.height - this.height;\n      this.speed = Math.random() * 3 + 2;\n      this.action = ifritMovements[Math.floor(Math.random() * ifritMovements.length)];\n\n      if (this.action === 'up') {\n        this.fy = 3;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      } else if (this.action === 'right') {\n        this.fy = 2;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      } else if (this.action === 'down') {\n        this.fy = 0;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      } else if (this.action === 'left') {\n        this.fy = 1;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      }\n    }\n\n    _createClass(Ifrit, [{\n      key: \"drawIfrit\",\n      value: function drawIfrit() {\n        drawPlayer(ifritTarget, this.width * this.fx, this.height * this.fy, this.width, this.height, this.x, this.y, this.width * 1.5, this.height * 1.5);\n\n        if (collision(player, this)) {\n          gameOver = true;\n        }\n\n        if (this.fx < this.maxFrame) {\n          this.fx++;\n        } else {\n          this.fx = this.minFrame;\n        }\n      }\n    }, {\n      key: \"updateIfritMovement\",\n      value: function updateIfritMovement() {\n        if (this.action === 'up') {\n          if (this.y < 0 - this.height * 5) {\n            this.y = canvas.height + this.height;\n            this.x = Math.random() * canvas.width;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.y -= this.speed;\n          }\n        } else if (this.action === 'right') {\n          if (this.x > canvas.width + this.width * 5) {\n            this.x = 0 - this.width;\n            this.y = Math.random() * canvas.height;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.x += this.speed;\n          }\n        } else if (this.action === 'left') {\n          if (this.x > canvas.width + this.width * 5) {\n            this.x = 0 + this.width;\n            this.y = Math.random() * canvas.height;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.x -= this.speed;\n          }\n        } else if (this.action === 'down') {\n          if (this.y > canvas.height + this.height * 5) {\n            this.y = 0 - this.height;\n            this.x = Math.random() * canvas.width;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.y += this.speed;\n          }\n        }\n      }\n    }]);\n\n    return Ifrit;\n  }(); // dragon \n\n\n  var Dragon = /*#__PURE__*/function () {\n    function Dragon() {\n      _classCallCheck(this, Dragon);\n\n      this.width = 142;\n      this.height = 142;\n      this.fx = 0;\n      this.x = Math.random() * canvas.width - this.width;\n      this.y = Math.random() * canvas.height - this.height;\n      this.speed = Math.random() * 3 + 2;\n      this.action = dragonMovement[Math.floor(Math.random() * dragonMovement.length)];\n\n      if (this.action === 'up') {\n        this.fy = 3;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      } else if (this.action === 'right') {\n        this.fy = 2;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      } else if (this.action === 'down') {\n        this.fy = 0;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      } else if (this.action === 'left') {\n        this.fy = 1;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      }\n    }\n\n    _createClass(Dragon, [{\n      key: \"drawDragon\",\n      value: function drawDragon() {\n        drawPlayer(dragonTarget, this.width * this.fx, this.height * this.fy, this.width, this.height, this.x, this.y, this.width * 1.5, this.height * 1.5);\n\n        if (collision(player, this)) {\n          gameOver = true;\n        }\n\n        if (this.fx < this.maxFrame) {\n          this.fx++;\n        } else {\n          this.fx = this.minFrame;\n        }\n      }\n    }, {\n      key: \"updateDragonMovement\",\n      value: function updateDragonMovement() {\n        if (this.action === 'up') {\n          if (this.y < 0 - this.height * 5) {\n            this.y = canvas.height + this.height;\n            this.x = Math.random() * canvas.width;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.y -= this.speed;\n          }\n        } else if (this.action === 'right') {\n          if (this.x > canvas.width + this.width * 5) {\n            this.x = 0 - this.width;\n            this.y = Math.random() * canvas.height;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.x += this.speed;\n          }\n        } else if (this.action === 'left') {\n          if (this.x > canvas.width + this.width * 5) {\n            this.x = 0 + this.width;\n            this.y = Math.random() * canvas.height;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.x -= this.speed;\n          }\n        } else if (this.action === 'down') {\n          if (this.y > canvas.height + this.height * 5) {\n            this.y = 0 - this.height;\n            this.x = Math.random() * canvas.width;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.y += this.speed;\n          }\n        }\n      }\n    }]);\n\n    return Dragon;\n  }(); // DeathScythe\n\n\n  var DeathScythe = /*#__PURE__*/function () {\n    function DeathScythe() {\n      _classCallCheck(this, DeathScythe);\n\n      this.width = 50;\n      this.height = 48;\n      this.fx = 0;\n      this.x = Math.random() * canvas.width - this.width;\n      this.y = Math.random() * canvas.height - this.height;\n      this.speed = Math.random() * 3 + 2;\n      this.action = deathScytheMovement[Math.floor(Math.random() * deathScytheMovement.length)];\n\n      if (this.action === 'up') {\n        this.fy = 3;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      } else if (this.action === 'right') {\n        this.fy = 2;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      } else if (this.action === 'down') {\n        this.fy = 0;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      } else if (this.action === 'left') {\n        this.fy = 1;\n        this.minFrame = 0;\n        this.maxFrame = 3;\n      }\n    }\n\n    _createClass(DeathScythe, [{\n      key: \"drawDeath\",\n      value: function drawDeath() {\n        drawPlayer(deathScytheTarget, this.width * this.fx, this.height * this.fy, this.width, this.height, this.x, this.y, this.width * 1.5, this.height * 1.5);\n\n        if (collision(player, this)) {\n          gameOver = true;\n        }\n\n        if (this.fx < this.maxFrame) {\n          this.fx++;\n        } else {\n          this.fx = this.minFrame;\n        }\n      }\n    }, {\n      key: \"updateDeathMovement\",\n      value: function updateDeathMovement() {\n        if (this.action === 'up') {\n          if (this.y < 0 - this.height * 5) {\n            this.y = canvas.height + this.height;\n            this.x = Math.random() * canvas.width;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.y -= this.speed;\n          }\n        } else if (this.action === 'right') {\n          if (this.x > canvas.width + this.width * 5) {\n            this.x = 0 - this.width;\n            this.y = Math.random() * canvas.height;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.x += this.speed;\n          }\n        } else if (this.action === 'left') {\n          if (this.x > canvas.width + this.width * 5) {\n            this.x = 0 + this.width;\n            this.y = Math.random() * canvas.height;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.x -= this.speed;\n          }\n        } else if (this.action === 'down') {\n          if (this.y > canvas.height + this.height * 5) {\n            this.y = 0 - this.height;\n            this.x = Math.random() * canvas.width;\n            this.speed = Math.random() * 3 + 2;\n          } else {\n            this.y += this.speed;\n          }\n        }\n      }\n    }]);\n\n    return DeathScythe;\n  }();\n\n  for (i = 0; i < numOfIfrit; i++) {\n    ifritBot.push(new Ifrit());\n  }\n\n  for (i = 0; i < numOfDragon; i++) {\n    dragonBot.push(new Dragon());\n  }\n\n  for (i = 0; i < numOfDeathScythe; i++) {\n    DeathScytheBot.push(new DeathScythe());\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/stylesheets/index.scss":
/*!************************************!*\
  !*** ./src/stylesheets/index.scss ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGluZ3Nob3QvLi9zcmMvc3R5bGVzaGVldHMvaW5kZXguc2Nzcz8yMzFlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSIsImZpbGUiOiIuL3NyYy9zdHlsZXNoZWV0cy9pbmRleC5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/stylesheets/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/stylesheets/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;